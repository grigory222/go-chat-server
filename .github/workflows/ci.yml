name: CI

on:
  workflow_dispatch: {}
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: chat_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U myuser -d chat_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      CONFIG_PATH: ./config/config.yaml
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: chat_db

    steps:
      - name: Checkout server repo
        uses: actions/checkout@v4

      - name: Checkout proto repo
        uses: actions/checkout@v4
        with:
          repository: grigory222/go-chat-proto
          path: go-chat-proto

      - name: Patch go.mod for CI
        run: |
          sed -i '/github.com\/grigory222\/go-chat-proto/d' go.mod
          echo "replace github.com/grigory222/go-chat-proto => ./go-chat-proto" >> go.mod
          go get github.com/grigory222/go-chat-proto@latest || true
          go mod tidy

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Download deps
        run: go mod download

      - name: Vet & staticcheck
        run: |
          go vet ./...
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./... || true

      - name: Run tests with coverage
        run: |
          go test -race -count=1 -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out | grep total: | awk '{print $3}' > coverage.txt

      - name: Generate coverage badge
        run: |
          mkdir -p .github/badges
          PCT=$(cat coverage.txt | sed 's/%//')
          COLOR=red
          if [ "${PCT%.*}" -ge 80 ]; then COLOR=brightgreen; elif [ "${PCT%.*}" -ge 60 ]; then COLOR=yellow; elif [ "${PCT%.*}" -ge 40 ]; then COLOR=orange; fi
          cat > .github/badges/coverage.svg <<EOF
          <svg xmlns="http://www.w3.org/2000/svg" width="120" height="20">
            <rect width="65" height="20" fill="#555"/>
            <rect x="65" width="55" height="20" fill="$COLOR"/>
            <text x="32" y="14" fill="#fff" font-family="Verdana" font-size="11">coverage</text>
            <text x="92" y="14" fill="#fff" font-family="Verdana" font-size="11">$PCT%</text>
          </svg>
          EOF

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage.out
            coverage.txt
            .github/badges/coverage.svg

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            Coverage: $(cat coverage.txt)
