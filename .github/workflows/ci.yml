name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: chat_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U myuser -d chat_db" \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 5

    env:
      # Config path for tests (storage tests use real Postgres only if you add them later)
      CONFIG_PATH: ./config/config.yaml
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: chat_db

    steps:
      - name: Checkout server repo
        uses: actions/checkout@v4

      - name: Checkout proto repo
        uses: actions/checkout@v4
        with:
          repository: grigory222/go-chat-proto
          path: go-chat-proto

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Go mod download
        run: go mod download

      - name: Run vet & staticcheck (if available)
        run: |
          go vet ./...
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./... || true

      - name: Run tests with coverage
        run: |
          go test -race -count=1 -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out | grep total: | awk '{print $3}' > coverage.txt

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage.out
            coverage.txt

      - name: Generate coverage badge
        id: covbadge
        run: |
          PCT=$(cat coverage.txt | sed 's/%//')
          COLOR=red
          if [ "${PCT%.*}" -ge 80 ]; then COLOR=brightgreen; elif [ "${PCT%.*}" -ge 60 ]; then COLOR=yellow; elif [ "${PCT%.*}" -ge 40 ]; then COLOR=orange; fi
          echo "pct=$PCT" >> $GITHUB_OUTPUT
          echo "color=$COLOR" >> $GITHUB_OUTPUT

      - name: Create coverage badge file
        run: |
          mkdir -p .github/badges
          PCT=$(cat coverage.txt)
          COLOR=${{ steps.covbadge.outputs.color }}
          cat > .github/badges/coverage.svg <<EOF
          <svg xmlns="http://www.w3.org/2000/svg" width="120" height="20" role="img" aria-label="coverage: $PCT">
            <linearGradient id="s" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient>
            <rect rx="3" width="120" height="20" fill="#555"/>
            <rect rx="3" x="65" width="55" height="20" fill="${{ steps.covbadge.outputs.color }}"/>
            <path fill="${{ steps.covbadge.outputs.color }}" d="M65 0h4v20h-4z"/>
            <rect rx="3" width="120" height="20" fill="url(#s)"/>
            <g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="11">
              <text aria-hidden="true" x="33" y="15" fill="#010101" fill-opacity=".3">coverage</text>
              <text x="33" y="14">coverage</text>
              <text aria-hidden="true" x="91" y="15" fill="#010101" fill-opacity=".3">$PCT</text>
              <text x="91" y="14">$PCT</text>
            </g>
          </svg>
          EOF

      - name: Upload coverage badge artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: .github/badges/coverage.svg

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            Coverage: ${{ steps.covbadge.outputs.pct }}%

  # Separate job only to expose the coverage badge as a downloadable artifact (no pages deployment).
  # If you want an always-live badge, consider uploading to GitHub Pages or shields.io endpoint.